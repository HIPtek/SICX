	-=SICX Cloud Gateway=-

SICX (Secure InterCloud eXchange) Cloud Gateway is a provider
independent secure multi-cloud storage software. 

SICX Cloud Gateway consists of three main parts:
1) meta - server(s) to store metadata
2) hydra - server(s) to store encryption key parts
3) client - user client with various GUIs

In addition optional identity management servers can be deployed to
provide user authentication.

Run - in three steps:
=====================

These instructions describe how to configure a fully functional setup
of SICX software where all the services are run locally. It should be
however easy to extend based on this to more realistic setup
configurations. 

In case you do not want to go through the setup steps manually, and
you are running GNU/Linux, just try to run:
bash setup_example_sicx.sh
For other platforms (Mac OS and Windows) you have to do the
configuration manually.

* Dependencies:
  - Java (>=1.6, JDK or OpenJDK)
  - OpenSSL (>=1.0)

1) Launch meta server

Meta server is required to store SICX filesystem metadata. It is not
possible to start the SICX client interface without access to a meta
server. 

git clone https://github.com/jhahkala/meta.git
cd meta
mvn package

Launch the meta server like this:
- cd meta
- rm -rf meta-storage.dat users-storage.dat # Start with an empty meta
- java -Djavax.net.debug=all -jar target/meta.jar src/test/meta.conf 

2) Launch hhydra servers

git clone https://github.com/jhahkala/hhydra.git
cd hhydra
mvn package

Launch for local test:

Create hhydra-storage.xml as described in hhydra/README (simple copy
paste). Also, create hhydra.conf with following content:

port=50201
storeConfigFile=hhydra-storage.xml
host=pchip10.cern.ch
sslCertFile=hostcert.pem
sslKey=hostkey.pem
trustStoreDir=/<absolute_path_to_meta>/src/test/certificates/
superuser=CN=trusted client,OU=Relaxation,O=Utopia,L=Tropic,C=UG

Update the <absolute_path_to_meta> to be path of your meta server
installation. Next, add following line to your /etc/hosts file:

127.0.0.1       pchip10.cern.ch

Finish configuration by executing these commands:
cp src/test/cert/*.pem .
cp -r hhydra hhydra2
cp -r hhydra hhydra3
sed 's/50201/50202/' hhydra/hhydra.conf > hhydra2/hhydra.conf
sed 's/50201/50203/' hhydra/hhydra.conf > hhydra3/hhydra.conf

Now you can launch all the three servers:
cd hhydra && java -Djavax.net.debug=all -cp target/hhydra.jar org.hydra.server.HydraServer hhydra.conf
cd hhydra2 && java -Djavax.net.debug=all -cp target/hhydra.jar org.hydra.server.HydraServer hhydra.conf
cd hhydra3 && java -Djavax.net.debug=all -cp target/hhydra.jar org.hydra.server.HydraServer hhydra.conf

Launch for real use:
Have independent companies or organizations run enough independent
hhdyra services to be secure.

3) Launch SICX client 

SICX client provides user interface to encrypt and decrypt files and
distribute the encrypted file parts and encryption key parts for
storage. Before launching the client both hydra and meta server have
to be configured.

cd client
mvn package
If you do not want to run the tests (not recommended), just run:
mvn -DskipTests package
To recompile, just run:
mvn clean; mvn package

The meta server access is configured with a java properties-formatted
configuration file, located at: "~/.sicx". Create ".sicx"-file with
following contents:

sslKey=/home/<user>/.sicx_data/trusted_client.priv
sslCertFile=/home/<user>/.sicx_data/trusted_client.cert
trustStoreDir=/home/<user>/.sicx_data/truststore
metaService=https\://localhost\:40669/MetaService
tmpPath=/tmp/
sslKeyPasswd=changeit
folder.local=/home/<user>/sicx
hydraConfig=/home/<user>/.sicx_data/hydras.properties

Change <user> to correspond to your username and metaService from
localhost to the hostname of meta server if you are not running the
meta server locally. The meta service's src/test folder has suitable
certificates and truststore for the first three values. The truststore
is in src/test/certificates/ directory. The parameter tmpPath
indicates a path were temporary files can be stored when program is
running. The parameter folder.local is only to keep track of the last
local folder that was viewed (autogenerated). Parameter hydraConfig
defines the location of the file that defines the locations of the
hydra servers.

Setup valid certificates for testing with meta server:
- mkdir ~/.sicx_data/
- cp ./meta/src/test/cert/trusted_client.cert ~/.sicx_data/
- openssl rsa -in ./meta/src/test/cert/trusted_client.priv > ~/.sicx_data/trusted_client.priv # password is changeit
- ln -s ./meta/src/test/certificates ~/.sicx_data/truststore
- cd meta && java -cp target/meta.jar org.joni.test.meta.client.MetaClient -c src/test/meta-client-trusted.conf addUser --name "CN=trusted client,OU=Relaxation,O=Utopia,L=Tropic,C=UG" --root SecureRoot --sla Open

Setup the ~/.sicx_data/hydras.properties file:
servers=test1,test2,test3
test1.url=https://pchip10.cern.ch:50201/HydraService
test2.url=https://pchip10.cern.ch:50202/HydraService
test3.url=https://pchip10.cern.ch:50203/HydraService

The first parameter above is the list of names of hydra servers. Then
for each hydra server there is the <name>.url line that defines the
url of the hydra server.

Now you can start the client in ./target/jnlp/:
javaws sicx.jnlp

If you have some security constraints in your java, you might need to
run like this:
javaws -nosecurity sicx.jnlp

If you want to run without graphical user interface:
javaws -Xnosplash -headless -Xtrustall sicx.jnlp 

If certificate now exists in its correct place, then you can log in
the Vaadin interface (GUI) using empty username and password.

Development environment:
========================

Requirements:
- Java (>=1.6, JDK or OpenJDK)
- Apache Maven (>=3.0)
- javaws (icedtea-web>=1.2, Java web start>=1.6)

Recommendations:
  - Eclipse platform: (>=3.7.x)
  - Eclipse Java EEE IDE for web developers (>= 1.4.x)
  - Eclipse Vaadin plugin: (>=2.0.x)
  - M2E Maven integration plugin: (>=1.0.x)
  - Eclipse plugins required/usefull (take "install new software" 
    and insert the following URLs to install the plugins):
    1) http://download.eclipse.org/technology/m2e/releases
      "Maven integration for Eclipse"
    2) http://vaadin.com/eclipse
      "Vaadin Plug-in for Eclipse"

Client certificates - generate your own (you can generate own test
certificates with this code):
git clone https://github.com/jhahkala/test-certs.git
Here is how to create certificates for user: "testuser"
export LOGNAME=testuser
export META_TRUSTSTORE_DIR=~/meta/src/test/certificates/ # Configure this
# Add Certificate Authority to meta
cd test-certs/bin && mkdir outdir && ./generate-test-certificates.sh outdir
cp outdir/trusted-ca/trusted.cert ${META_TRUSTSTORE_DIR}/`openssl x509 -noout -subject_hash_old -in outdir/trusted-ca/trusted.cert`.0
cp outdir/trusted-ca/trusted.crl ${META_TRUSTSTORE_DIR}/`openssl x509 -noout -subject_hash_old -in outdir/trusted-ca/trusted.cert`.r0
# Add new certificate and private key for the new user
cp outdir/trusted-certs/trusted_client00.cert ~/.sicx_data/trusted_client.cert
openssl rsa -in outdir/trusted-certs/trusted_client00.priv > ~/.sicx_data/trusted_client.priv # Default password is "changeit"
java -cp target/meta.jar org.joni.test.meta.client.MetaClient -c src/test/meta-client-trusted.conf addUser --name "CN=${LOGNAME},OU=Relaxation,O=Utopia,L=Tropic,C=UG" --root SecureRoot --sla Open
Note that when using your own certificates with hhydra, then you might
need to specify SSL key password in the hhydra.conf file, e.g. line
sslKeyPasswd=changeit

SICX as ownCloud backend:
=========================

SICX can be mounted (using webdav) to act as a backend for ownCloud
(http://owncloud.org/). This means that ownCloud files are stored
securely through SICX instead of directly to the local harddisk.

Example setup can be launched with the provided script:
bash setup_example_sicx.sh  # If not launched already
bash setup_sicx_owncloud.sh # Needs to be run in different shell

Purpose of different files:
===========================

~${user}/.sicx_data/trusted_client.cert
~${user}/.sicx_data/trusted_client.priv
	Used by: sicx to access meta.
	Purpose: SSL authentication to meta. Received from the
	authentication server. Without valid certificate you will get
	errors like "bad certificate" or "handshake failed". You can
	check if certificate is valid by:
	openssl verify -CAfile server.crt server.crt
	openssl verify -CApath /truststore_path server.crt
	Generating/adding new: ?

meta/trunk/src/test/certificates/
	Used by: meta.
	Purpose: List of known certificates. These are used (for now)
	only to access hydra servers and meta servers. The obscure
	filenames are actually hash values based on the certificates. 
	Generating/adding new: 
	openssl x509 -noout -subject_hash_old -in 2537774a.0

meta/trunk/src/test/certificates/*.r0
	Used by: meta.
	Purpose: List of certificates that should not be relied upon,
	aka CRL (Certificate Revocation List). The Certificate
	Authorities produce these as a way to de-authorize
	certificates before expiration. This is compulsory together
 	with .0 file (certificate file) to enable verification of
	user certificates.
	Check status with:
	openssl crl -text -in truststore/2537774a.r0
	Generating/adding new: ?
	openssl ca -gencrl -keyfile ca_key -cert ca_crt -out my_crl.pem 
	
meta/trunk/src/test/certificates/*.0
	Used by: meta.
	Certificates (public parts of the private-public key pair).
	http://en.wikipedia.org/wiki/Station-to-Station_protocol
	Check status with:
	openssl verify 2537774a.0
	Generating/adding new: ?

meta/trunk/src/test/certificates/*.namespaces
	Used by: meta.
	Namespaces files - human readable description
	of issuer and subject.
	Generating/adding new: ?

meta/trunk/src/test/certificates/*.signing_policy
	Used by: meta.
	Some signature files.

meta/trunk/src/test/cert/*.pem
	Used by: meta.
	Certificate and key, i.e. public and private key pairs.
	Used by the meta server in SSL authentication process.

meta/trunk/src/test/meta-client-trusted.conf
	Used by: meta.
	Configuration file that can be used to add new trusted
	client for the meta server. 
	FIXME: What files and where does adding new client generate=

meta/trunk/src/test/meta.conf
	Used by: meta.
	Meta server configuration file. Defines certificate for the
	server, trusted client certificates, port, etc.

meta/trunk/src/test/meta-storage.xml
	Used by: meta.
	Defines meta server parameters.

meta/trunk/meta-storage.dat
meta/trunk/users-storage.dat
	Used by: meta.
	New clients that are added to the meta server.

meta/trunk/src/test/cert/trusted_client.cert
meta/trunk/src/test/cert/trusted_client.priv
	Used by: meta.
	Example client certificate and key that can be
	used to access meta server. The private key can
	be encrypted or not. If it is encrypted, you can
	decrypt it e.g. like this:
        openssl rsa -in trusted_client.priv > trusted_client.priv
	See the status with:
	openssl x509 -text -in trusted_client.cert

sicx/trunk/src/test/input/hydra-services.xml
	Used by: sicx (web.war) to access meta.
	Client settings for accessing meta server, i.e. how to 
	access hydra servers.
	
sicx/trunk/src/test/input/igtf-policy-accredited-classic-1.47.jks
sicx/trunk/src/test/input/igtf-policy-accredited-classic-1.44.jks
	Used by: sicx (web.war) to access meta.
	Purpose: Truststore for Authority Root Certificates? The
	International Grid Trust Federation (IGTF).

sicx/trunk/src/main/java/slcs-init.xml
	Used by: sicx (web.war) to access Short Lived Credential
	Service (SLCS).
	Purpose: Settings for communicating with Short Lived Credential
        Service (SLCS).

sicx/trunk/src/main/java/slcs-metadata.xml
	Used by: sicx (web.war) to access Short Lived Credential
        Service (SLCS).
	Purpose: Pseudo Metadata for the Shibboleth federation description.

sicx/trunk/src/main/java/truststore.slcs.jks
	Used by: sicx (web.war) to access Short Lived Credential
        Service (SLCS).
	Purpose: Truststore containing trusted certificates (public parts).

sicx/trunk/src/test/input/trusted_client.p12
	Used by: sicx (web.war) to connect meta.
	Purpose: Authentication key store. For what?!?

sicx/trunk/src/main/java/fec.properties
	Used by: sicx (hydra-client-java.jar).
	Purpose: Define how data is encrypted.

???/???/VAADIN/widgetsets/fi.hip.sicx.vaadin.CustomWidgetset
	Used by: sicx (vaadin-6.7.7.jar).
	Purpose: to enable use of Vaadin refresher plugin, which
	enables server side updates to be visible in client side GUI.